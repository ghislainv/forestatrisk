"""Testing funtions in get started tutorial."""

import os

import numpy as np


def test_make_dir():
    """Test output directory."""
    assert os.path.exists("output")


def test_data():
    """Test data directory."""
    assert os.path.exists("data")


def test_plot_fcc23():
    """Test plot fcc23."""
    assert os.path.exists("output/fcc23.png")


def test_sample():
    """Test sample."""
    assert os.path.exists("output/sample.txt")


def test_dataset(gstart):
    """Test dataset."""
    assert gstart["dataset"].iloc[0, 0] == 30.0


def test_cellneigh(gstart):
    """Test cellneigh."""

    nneigh = np.array([3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 8, 8, 8, 8,
                       8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                       5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8,
                       8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8,
                       8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8,
                       8, 8, 8, 8, 8, 8, 8, 5, 3, 5, 5, 5, 5, 5, 5, 5,
                       5, 5, 3])

    adj = np.array([1, 11, 12, 0, 2, 11, 12, 13, 1, 3, 12, 13, 14, 2,
                    4, 13, 14, 15, 3, 5, 14, 15, 16, 4, 6, 15, 16, 17,
                    5, 7, 16, 17, 18, 6, 8, 17, 18, 19, 7, 9, 18, 19,
                    20, 8, 10, 19, 20, 21, 9, 20, 21, 0, 1, 12, 22, 23,
                    0, 1, 2, 11, 13, 22, 23, 24, 1, 2, 3, 12, 14, 23,
                    24, 25, 2, 3, 4, 13, 15, 24, 25, 26, 3, 4, 5, 14,
                    16, 25, 26, 27, 4, 5, 6, 15, 17, 26, 27, 28, 5, 6,
                    7, 16, 18, 27, 28, 29, 6, 7, 8, 17, 19, 28, 29, 30,
                    7, 8, 9, 18, 20, 29, 30, 31, 8, 9, 10, 19, 21, 30,
                    31, 32, 9, 10, 20, 31, 32, 11, 12, 23, 33, 34, 11,
                    12, 13, 22, 24, 33, 34, 35, 12, 13, 14, 23, 25, 34,
                    35, 36, 13, 14, 15, 24, 26, 35, 36, 37, 14, 15, 16,
                    25, 27, 36, 37, 38, 15, 16, 17, 26, 28, 37, 38, 39,
                    16, 17, 18, 27, 29, 38, 39, 40, 17, 18, 19, 28, 30,
                    39, 40, 41, 18, 19, 20, 29, 31, 40, 41, 42, 19, 20,
                    21, 30, 32, 41, 42, 43, 20, 21, 31, 42, 43, 22, 23,
                    34, 44, 45, 22, 23, 24, 33, 35, 44, 45, 46, 23, 24,
                    25, 34, 36, 45, 46, 47, 24, 25, 26, 35, 37, 46, 47,
                    48, 25, 26, 27, 36, 38, 47, 48, 49, 26, 27, 28, 37,
                    39, 48, 49, 50, 27, 28, 29, 38, 40, 49, 50, 51, 28,
                    29, 30, 39, 41, 50, 51, 52, 29, 30, 31, 40, 42, 51,
                    52, 53, 30, 31, 32, 41, 43, 52, 53, 54, 31, 32, 42,
                    53, 54, 33, 34, 45, 55, 56, 33, 34, 35, 44, 46, 55,
                    56, 57, 34, 35, 36, 45, 47, 56, 57, 58, 35, 36, 37,
                    46, 48, 57, 58, 59, 36, 37, 38, 47, 49, 58, 59, 60,
                    37, 38, 39, 48, 50, 59, 60, 61, 38, 39, 40, 49, 51,
                    60, 61, 62, 39, 40, 41, 50, 52, 61, 62, 63, 40, 41,
                    42, 51, 53, 62, 63, 64, 41, 42, 43, 52, 54, 63, 64,
                    65, 42, 43, 53, 64, 65, 44, 45, 56, 66, 67, 44, 45,
                    46, 55, 57, 66, 67, 68, 45, 46, 47, 56, 58, 67, 68,
                    69, 46, 47, 48, 57, 59, 68, 69, 70, 47, 48, 49, 58,
                    60, 69, 70, 71, 48, 49, 50, 59, 61, 70, 71, 72, 49,
                    50, 51, 60, 62, 71, 72, 73, 50, 51, 52, 61, 63, 72,
                    73, 74, 51, 52, 53, 62, 64, 73, 74, 75, 52, 53, 54,
                    63, 65, 74, 75, 76, 53, 54, 64, 75, 76, 55, 56, 67,
                    77, 78, 55, 56, 57, 66, 68, 77, 78, 79, 56, 57, 58,
                    67, 69, 78, 79, 80, 57, 58, 59, 68, 70, 79, 80, 81,
                    58, 59, 60, 69, 71, 80, 81, 82, 59, 60, 61, 70, 72,
                    81, 82, 83, 60, 61, 62, 71, 73, 82, 83, 84, 61, 62,
                    63, 72, 74, 83, 84, 85, 62, 63, 64, 73, 75, 84, 85,
                    86, 63, 64, 65, 74, 76, 85, 86, 87, 64, 65, 75, 86,
                    87, 66, 67, 78, 88, 89, 66, 67, 68, 77, 79, 88, 89,
                    90, 67, 68, 69, 78, 80, 89, 90, 91, 68, 69, 70, 79,
                    81, 90, 91, 92, 69, 70, 71, 80, 82, 91, 92, 93, 70,
                    71, 72, 81, 83, 92, 93, 94, 71, 72, 73, 82, 84, 93,
                    94, 95, 72, 73, 74, 83, 85, 94, 95, 96, 73, 74, 75,
                    84, 86, 95, 96, 97, 74, 75, 76, 85, 87, 96, 97, 98,
                    75, 76, 86, 97, 98, 77, 78, 89, 77, 78, 79, 88, 90,
                    78, 79, 80, 89, 91, 79, 80, 81, 90, 92, 80, 81, 82,
                    91, 93, 81, 82, 83, 92, 94, 82, 83, 84, 93, 95, 83,
                    84, 85, 94, 96, 84, 85, 86, 95, 97, 85, 86, 87, 96,
                    98, 86, 87, 97])

    cond1 = np.array_equal(gstart["nneigh"], nneigh)
    cond2 = np.array_equal(gstart["adj"], adj)

    assert cond1 and cond2


def test_model_binomial_icar(gstart):
    """Test icar model."""

    pred_icar_first100 = np.array(
        [0.35438089, 0.30337798, 0.51327636,
         0.48372995, 0.60988615, 0.61202068, 0.54933594, 0.59075205,
         0.5194735, 0.59075205, 0.63612357, 0.56841119, 0.5658576,
         0.60702877, 0.53585252, 0.6018291, 0.52541584, 0.16963231,
         0.5818747, 0.36342955, 0.52803948, 0.55540942, 0.6018291,
         0.19243054, 0.47983699, 0.52104371, 0.56955971, 0.45700238,
         0.59910393, 0.56888268, 0.76369915, 0.74836433, 0.77370262,
         0.74046794, 0.78088004, 0.74735032, 0.5816448, 0.64410743,
         0.74656814, 0.7754719, 0.54229216, 0.76126378, 0.77861808,
         0.57585699, 0.72185313, 0.74861639, 0.75768725, 0.43563092,
         0.76473241, 0.76626552, 0.47532312, 0.70785686, 0.76076037,
         0.78317888, 0.77088662, 0.59373028, 0.77808134, 0.7644772,
         0.78120206, 0.58834561, 0.51316427, 0.77948597, 0.76643807,
         0.73494492, 0.78290534, 0.72951183, 0.78117913, 0.74988153,
         0.68756545, 0.78742308, 0.7555734, 0.67900059, 0.76082792,
         0.44093069, 0.77808134, 0.62336304, 0.60495624, 0.76111439,
         0.73798145, 0.73020457, 0.46356801, 0.61755267, 0.72525411,
         0.68359154, 0.75379499, 0.77442182, 0.78290534, 0.74411946,
         0.78742308, 0.78312142, 0.73397805, 0.66989689, 0.78475079,
         0.59363666, 0.73361018, 0.77982211, 0.75537339, 0.77710226,
         0.70440215, 0.72287396
         ]
    )

    assert np.allclose(gstart["pred_icar"][0:100], pred_icar_first100)

def test_rho(gstart):
    """Test rho."""

    rho = np.array(
        [-0.12650746, -0.20582526, -0.26286126, 0.23042446,
         -0.67004807, -0.08694769, 0.17694911, 0.09071921, -0.15909865,
         -0.05602902, -0.16263506, -0.02791821, -0.15140489, -0.41190497,
         -0.98517249, 0.01235329, 0.43097816, 0.04199379, 0.02182596,
         -0.18163922, -0.32594289, -0.18418401, 0.97574543, -0.14959125,
         -0.59438325, -0.85528349, -0.59529879, -0.47604929, 0.47429255,
         -0.12943802, -0.83543767, -0.40729378, -0.39718303, 2.02221563,
         -0.25293905, -0.54669393, -0.31697202, -0.36294309, -0.37746693,
         0.21629101, -0.26653246, -0.3618653, -0.42706723, -0.57259655,
         1.38996533, 1.57703767, -0.1883576, 0.05822477, -0.20809568,
         -0.10588259, -0.12354832, -0.11993526, -0.1509036, -0.39087787,
         -0.40642164, 1.25148914, 2.28466897, 0.36305368, 0.80686238,
         0.33590061, -0.03101177, -0.30227737, -0.49242493, -0.53280804,
         -0.46185984, -0.54179279, 1.40109644, 1.37622784, 0.30731785,
         0.90923863, 0.39275146, -0.06643735, -0.7822307, -0.77783262,
         -0.63430098, -0.71086906, -0.73352981, 1.35643231, 1.50069948,
         1.29562088, 0.86122103, 0.4304332, -0.3439513, -0.56116655,
         -0.98577889, -0.87647935, -0.94402823, -0.9441148, 1.35499711,
         1.34587888, 1.88837298, 1.21323366, 0.44130845, -0.02351083,
         -0.64859895, -0.78514542, -0.93039709, -1.0151815, -1.09291625
         ]
    )

    assert np.allclose(gstart["rho"], rho)


def test_interpolate_rho():
    """Test interpolate."""
    assert os.path.exists("output/rho.tif")


def test_predict_raster_binomial_icar():
    """Test predict raster."""
    assert os.path.exists("output/prob.tif")


def test_countpix(gstart):
    """Test countpix."""
    assert gstart["fc"] == [83999.25, 79015.5]


def test_deforest():
    """Test deforest."""
    assert os.path.exists("output/fcc_2050.tif")


def test_plot_fcc123():
    """Test plot fcc123."""
    assert os.path.exists("output/fcc123.png")


def test_plot_rho():
    """Test plot rho."""
    assert os.path.exists("output/rho_orig.png")


def test_plot_prob():
    """Test plot prob."""
    assert os.path.exists("output/prob.png")


def test_plot_fcc():
    """Test plot fcc."""
    assert os.path.exists("output/fcc_2050.png")


# End Of File
